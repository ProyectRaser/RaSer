name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    uses: ./.github/workflows/reusableworkflows.yml
    with:
      java-version: '17'

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Upload test results if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-failures
          path: app/build/test-results/

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Android Lint
        run: ./gradlew lint

      
      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: app/build/reports/lint-results-debug.html
        



  build:
    needs: [setup, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project and APK
        run: ./gradlew build assembleDebug

      - name: Run unit tests (Android)
        run: ./gradlew :app:testDebugUnitTest --rerun-tasks

  coverage:
    needs: [setup, build]
    runs-on: ubuntu-latest
    name: Generate & Upload JaCoCo Coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run unit tests again (for coverage)
        run: ./gradlew :app:testDebugUnitTest --rerun-tasks

      - name: Generate JaCoCo coverage report
        run: ./gradlew :app:jacocoTestReport --rerun-tasks

      - name: Verificar si se gener칩 el reporte
        run: |
          echo "Buscando HTML de cobertura..."
          find app/build/reports/jacoco/ -type f -name "index.html" || echo "No se encontr칩 index.html"

      - name: Upload coverage report (si existe)
        if: success() && hashFiles('app/build/reports/jacoco/test/html/index.html') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: app/build/reports/jacoco/test/html

  sonarcloud-analysis:
    needs: [setup, coverage]
    runs-on: ubuntu-latest
    name: An치lisis SonarCloud
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project (necesario para SonarCloud)
        run: ./gradlew :app:assembleDebug

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=ProyectRaser_RaSer
            -Dsonar.organization=proyectraser
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.java.binaries=app/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/test/jacocoTestReport.xml

  security-analysis:
    needs: [setup, sonarcloud-analysis]
    name: An치lisis de vulnerabilidades con Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk CLI
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test for vulnerabilities
        run: snyk test --all-projects --org=RaSer

        continue-on-error: true
        
      - name: Run Snyk monitor for vulnerabilities
        run: snyk monitor --all-projects --org=RaSer  
       

  publish-artifacts:
    needs: [setup, security-analysis]
    name: Subir APK a GitHub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

  docker-release:
    needs: publish-artifacts
    name: Publicar imagen Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/android-apk-builder:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/android-apk-builder:latest ${{ secrets.DOCKER_USERNAME }}/android-apk-builder:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/android-apk-builder:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/android-apk-builder:${{ github.run_number }}

  dependency-submission:
    needs: docker-release
    name: Submit Dependency Graph
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Submit dependency graph
        uses: gradle/actions/dependency-submission@v4
